" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Jul 02
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  "set backup		" keep a backup file
  set nobackup		" do not keep a backup file, use versions instead
endif

set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a      "a=all-mode; Select copy does not work
  "set mouse=r      "r=hit enter mode. donnot know. 
  "set mouse=v      "v=visual mode
  "set mouse=n       "n=normal mode, works best for me
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on
  set smartindent			"Intelligent indentation for C/C++
  set tabstop=4				"4 Spaces for tab
  set shiftwidth=4			" ident is also 4 spaces

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

set number
set showmatch
set hlsearch
set cursorline
set laststatus=2
set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]
set ruler
set showcmd
set incsearch
set ignorecase
set expandtab
set splitright
syntax enable
set nocp

":color ron     "not good for light background
":set background=dark
color desert
":color delek
":color shine
":color morning
":color blue
":color koehler
":color pablo
"syntax on

set clipboard=unnamed
":let @+=42                     "Only works for vim; not vi


" using same copy clipboard
"set clipboard=unnamedplus


set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4


"For ctags
set autochdir  "make pwd as current directory
set tags+=./tags;
filetype on
filetype plugin on
let Tlist_WinWidth = 50
command! MakeTags !ctags -R --exclude=.git --exclude="*.log"  --exclude="*.bin" --exclude="*.js" --exclude="*.so" --exclude="*.o" --exclude="*.py"  .

nnoremap <C-l> :Tlist<CR>

"nnoremap tn :tabedit %
"nnoremap <C-g> :tabedit %<CR>
nnoremap <C-g> :let lc=getcurpos()<CR>:tabedit %<CR>:call setpos(".",lc)<CR>zz
nnoremap <C-\> :let lc=getcurpos()<CR>:tabedit %<CR>:call setpos(".",lc)<CR><C-]>zz
nnoremap <C-c> :tabclose<CR>

"for smart vim
set path+=**
set wildmenu


